package ch.epfl.dias.cs460.rel.early.volcano.late

import ch.epfl.dias.cs460.helpers.builder.skeleton
import ch.epfl.dias.cs460.helpers.rel.RelOperator.{LateTuple, NilLateTuple, Tuple}
import org.apache.calcite.rex.RexNode

import scala.collection.mutable

/**
  * @inheritdoc
  *
  * @see [[ch.epfl.dias.cs460.helpers.builder.skeleton.Join]]
  * @see [[ch.epfl.dias.cs460.helpers.rel.late.volcano.naive.Operator]]
  */
class LateJoin(
               left: ch.epfl.dias.cs460.helpers.rel.late.volcano.naive.Operator,
               right: ch.epfl.dias.cs460.helpers.rel.late.volcano.naive.Operator,
               condition: RexNode
             ) extends skeleton.Join[
  ch.epfl.dias.cs460.helpers.rel.late.volcano.naive.Operator
](left, right, condition)
  with ch.epfl.dias.cs460.helpers.rel.late.volcano.naive.Operator {

  /**
   * Hash table for the tuples of the right operator.
   */
  private val rightHashMap = mutable.HashMap.empty[Tuple, Iterable[LateTuple]]

  /**
   * Each tuple from the left operator can generate multiple output tuples.
   * In order to iterate only once through the left operator, we store
   * all the output tuples generated by a "left" tuple in this
   * output buffer. Once it's empty, we fetch the next left tuple.
   */
  private val outputBuffer = mutable.Queue.empty[Tuple]

  /**
   * We cannot keep the same virtual ids of the input relations, so we
   * generate new virtual ids with a simple counter.
   */
  private var next_vid = 0

  /**
    * @inheritdoc
    */
  override def open(): Unit =
    rightHashMap.clear()
    rightHashMap ++= right groupBy { tuple =>
      getRightKeys map (tuple.value(_))
    }
    outputBuffer.clear()
    left.open()
    next_vid = 0

  /**
    * @inheritdoc
    */
  override def next(): Option[LateTuple] =
    if outputBuffer.isEmpty then
      // Find the next left tuple that matches some right tuple
      val matchingTupleBuffers = LazyList continually left.next() takeWhile (_.isDefined) map (_.get) map { leftTuple =>
        val key = getLeftKeys map (leftTuple.value(_))
        rightHashMap get key map {
          for rightTuple <- _
            yield leftTuple.value ++ rightTuple.value
        }
      } collect { case Some(outputTuples) => outputTuples }
      matchingTupleBuffers.headOption flatMap { matchingTuples =>
        // If there are matching tuples, fill the output buffer and recurse
        outputBuffer ++= matchingTuples
        next()
      }
    else
      val vid = next_vid
      next_vid += 1
      Some(LateTuple(vid, outputBuffer.dequeue()))

  /**
    * @inheritdoc
    */
  override def close(): Unit =
    next_vid = 0
    left.close()
    outputBuffer.clear()
    rightHashMap.clear()
}
